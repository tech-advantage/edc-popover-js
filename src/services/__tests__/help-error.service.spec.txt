import { HelpErrorService } from '../help-error.service';
import { HelpIconService } from '../help-icon.service';
import { HelpPopoverService } from '../help-popover.service';
import { provideService } from '../../utils/test.utils';
import { EdcPopoverOptions, IconConfig, IconPopoverConfig, IEdcPopoverOptions } from '../../class';
import { EdcClient } from 'edc-client-js/index';
import { DEFAULT_LABELS } from '../../translate/default-translations';
import { ContentNotFoundError } from '../../errors/content-not-found.error';
import { IconBehavior, PopoverBehavior } from '../../class/fail-behavior';
import { DEFAULT_ICON } from '../../constants/style.constant';
jest.mock('edc-client-js');

describe('HelpError service test', () => {

    let helpErrorService: HelpErrorService;

    let helpIconService: HelpIconService;
    let helpPopoverService: HelpPopoverService;
    beforeEach(() => {
        jest.spyOn(EdcClient.prototype, 'getHelper').mockImplementation(() => Promise.resolve({}));
    });

    beforeEach(() => {
        helpIconService = provideService<HelpIconService>(HelpIconService);
        helpPopoverService = provideService<HelpPopoverService>(HelpPopoverService);
        helpErrorService = provideService<HelpErrorService>(HelpErrorService);
    });

    describe('handleHelpError', () => {
        let config: IconPopoverConfig;
        let options: IEdcPopoverOptions;

        beforeEach(() => {
            config = new IconPopoverConfig();
            options = new EdcPopoverOptions();
            // Mock addLabels with system language - should set the given config labels

            jest.spyOn(HelpPopoverService.prototype, 'addLabels').mockImplementation(() => {
                config.labels = DEFAULT_LABELS.get('en');
                return Promise.resolve(config);
            });
        });

        // ContentNotFoundError - default content
        it('should return a valid configuration', () => {
            // Given we have a ContentNotFoundError and a icon configuration
            const iconConfig = new IconConfig();
            iconConfig.icon.class = 'my other class';
            jest.spyOn(HelpIconService.prototype, 'buildErrorIconConfig').mockImplementation(() => iconConfig);
            const error: ContentNotFoundError = new ContentNotFoundError('myKey', 'mySubKey', 'en');

            // When calling handleHelpError
            helpErrorService.handleHelpError(error, options, 'en').then((errorConfig: IconPopoverConfig) => {
                expect(errorConfig).toBeDefined();
                // Labels should be defined
                expect(errorConfig.labels).toEqual(DEFAULT_LABELS.get('en'));
                // Icon config should have been set by helpIconService
                expect(HelpIconService.prototype.buildErrorIconConfig).toHaveBeenCalledWith(options, errorConfig.labels);
                expect(errorConfig.iconConfig.icon.class).toEqual('my other class');
                // Default content should have been set - description coming soon message and no title
                expect(errorConfig.content.description).toEqual(DEFAULT_LABELS.get('en').comingSoon);
                expect(errorConfig.content.title).toBeFalsy();
            });
        });
        // Failbehavior : icon SHOWN, popover ERROR_SHOWN
        it('should return a configuration with icon SHOWN and popover ERROR_SHOWN', () => {
            // Given we have a ContentNotFoundError and fail behavior with IconBehavior.SHOWN && PopoverBehavior.ERROR_SHOWN
            expect(options.failBehavior.icon).toEqual(IconBehavior.SHOWN);
            options.failBehavior.popover = PopoverBehavior.ERROR_SHOWN;
            jest.spyOn(HelpIconService.prototype, 'buildErrorIconConfig').mockImplementation(() => new IconConfig());
            const error: ContentNotFoundError = new ContentNotFoundError('myKey', 'mySubKey', 'en');

            // When calling handleHelpError
            helpErrorService.handleHelpError(error, options, 'en').then((errorConfig: IconPopoverConfig) => {
                // Labels should be defined
                expect(errorConfig.labels).toEqual(DEFAULT_LABELS.get('en'));
                // Icon config should have been set by helpIconService
                expect(HelpIconService.prototype.buildErrorIconConfig).toHaveBeenCalledWith(options, errorConfig.labels);
                // Default content should have been set: icon class, description with failed data message and title with errorTitle
                expect(errorConfig.iconConfig.icon.class).toEqual(DEFAULT_ICON);
                expect(errorConfig.content.description).toEqual(DEFAULT_LABELS.get('en').errors.failedData);
                expect(errorConfig.content.title).toEqual(DEFAULT_LABELS.get('en').errorTitle);
            });
        });
        // Failbehavior : icon DISABLED, popover ERROR_SHOWN
        it('should return a configuration with icon DISABLED and popover ERROR_SHOWN', () => {
            // Given we have a ContentNotFoundError and fail behavior with IconBehavior.DISABLED && PopoverBehavior.ERROR_SHOWN
            options.failBehavior.icon = IconBehavior.DISABLED;
            options.failBehavior.popover = PopoverBehavior.ERROR_SHOWN;
            jest.spyOn(HelpIconService.prototype, 'buildErrorIconConfig').mockImplementation(() => new IconConfig());
            const error: ContentNotFoundError = new ContentNotFoundError('myKey', 'mySubKey', 'en');

            // When calling handleHelpError
            helpErrorService.handleHelpError(error, options, 'en').then((errorConfig: IconPopoverConfig) => {
                // Labels should be defined
                expect(errorConfig.labels).toEqual(DEFAULT_LABELS.get('en'));
                // Icon config should have been set by helpIconService
                expect(HelpIconService.prototype.buildErrorIconConfig).toHaveBeenCalledWith(options, errorConfig.labels);
                // Default content should have been set
                expect(errorConfig.content.description).toEqual(DEFAULT_LABELS.get('en').errors.failedData);
                expect(errorConfig.content.title).toEqual(DEFAULT_LABELS.get('en').errorTitle);
                expect(errorConfig.disablePopover).toBe(true);
            });
        });
        // Failbehavior : icon ERROR, popover NO_POPOVER

        const checkHandleHelpErrorCall = (error: ContentNotFoundError, popoverOptions: IEdcPopoverOptions, lang: string): void => {
            helpErrorService.handleHelpError(error, popoverOptions, 'en').then((errorConfig: IconPopoverConfig) => {
                // Labels should be defined
                expect(errorConfig.labels).toEqual(DEFAULT_LABELS.get('en'));
                // Icon config should have been set by helpIconService
                expect(HelpIconService.prototype.buildErrorIconConfig).toHaveBeenCalledWith(options, errorConfig.labels);
                // Default content should be null and disabledPopover should be true
                expect(errorConfig.content).toBeNull();
                expect(errorConfig.disablePopover).toBeTruthy();
            });
        }
        it('should return a configuration with icon ERROR and popover NO_POPOVER', () => {
            // Given we have a ContentNotFoundError and fail behavior with IconBehavior.ERROR && PopoverBehavior.NO_POPOVER
            options.failBehavior.icon = IconBehavior.ERROR;
            options.failBehavior.popover = PopoverBehavior.NO_POPOVER;
            jest.spyOn(HelpIconService.prototype, 'buildErrorIconConfig').mockImplementation(() => new IconConfig());
            const error: ContentNotFoundError = new ContentNotFoundError('myKey', 'mySubKey', 'en');

            // When calling handleHelpError, error options and lang should have been used for the call
            checkHandleHelpErrorCall(error, options, 'en');
        });
        // Failbehavior : icon HIDDEN, popover FRIENDLY_MSG
        it('should return a configuration with icon HIDDEN and popover FRIENDLY_MSG', () => {
            // Given we have a ContentNotFoundError and fail behavior with IconBehavior.HIDDEN && PopoverBehavior.FRIENDLY_MSG
            options.failBehavior.icon = IconBehavior.HIDDEN;
            options.failBehavior.popover = PopoverBehavior.FRIENDLY_MSG;
            jest.spyOn(HelpIconService.prototype, 'buildErrorIconConfig').mockImplementation(() => new IconConfig());
            const error: ContentNotFoundError = new ContentNotFoundError('myKey', 'mySubKey', 'en');

            // When calling handleHelpError, error options and lang should have been used for the call
            checkHandleHelpErrorCall(error, options, 'en');
        });

        // Other errors
        it('should return a configuration for the other errors', () => {
            // Given we have a simple Error and fail behavior with IconBehavior.SHOWN && PopoverBehavior.FRIENDLY_MSG
            options.failBehavior.icon = IconBehavior.SHOWN;
            options.failBehavior.popover = PopoverBehavior.FRIENDLY_MSG;
            jest.spyOn(HelpIconService.prototype, 'buildErrorIconConfig').mockImplementation(() => new IconConfig());
            const error: Error = new Error('An unlisted error occurred');

            // When calling handleHelpError
            helpErrorService.handleHelpError(error, options, 'en').then((errorConfig: IconPopoverConfig) => {
                // Labels should be defined
                expect(errorConfig.labels).toEqual(DEFAULT_LABELS.get('en'));
                // Icon config should have been set by helpIconService
                expect(HelpIconService.prototype.buildErrorIconConfig).toHaveBeenCalledWith(options, errorConfig.labels);
                // Default content description should be coming soon and no title should be set
                expect(errorConfig.content.description).toEqual(DEFAULT_LABELS.get('en').comingSoon);
                expect(errorConfig.content.title).toBeFalsy();
            });
        });
    });
});
